using System;
using System.Text;

namespace OpenBve
{
	/// <summary>Contains shared helper functions for BVE5 parsing</summary>
	internal class Bve5Shared
	{
		/// <summary>Validates a BVE5 file format header</summary>
		/// <param name="fileHeader">The file header</param>
		/// <param name="expectedHeader">The expected header</param>
		/// <param name="maxSupportedVersion">The max version we support</param>
		/// <param name="Encoding">The text endcoding of this file (if specified in the header</param>
		/// <param name="headerType">The header type (for logging etc.)</param>
		/// <param name="Version">The header version</param>
		/// <returns>Whether the header was validated successfully</returns>
		internal static void ValidateHeader(string fileHeader, string expectedHeader, double maxSupportedVersion, out double Version, out Encoding Encoding, string headerType)
		{
			string[] splitHeader = fileHeader.Split(new char[] {':'});
			Version = 0;
			if (!splitHeader[0].StartsWith(expectedHeader, StringComparison.InvariantCultureIgnoreCase))
			{
				throw new Exception("Invalid BVE5 " + headerType + " header: " + fileHeader);
			}
			int l = splitHeader[0].Length -1;
			int e = splitHeader[0].Length;
			while (l > 0)
			{
				if (!Char.IsDigit(splitHeader[0][l]) && splitHeader[0][l] != '.')
				{
					if (splitHeader[0][l] == ',')
					{
						//If generated by Excel or the BVETS Convertor, a CSV may contain commas at the end of the format line
						e--; l--;
						continue;
					}
					string s = splitHeader[0].Substring(l + 1, e - l -1);
					if (!Double.TryParse(s, out Version))
					{
						throw new Exception("Invalid BVE5 " + headerType + " version: " + s);
					}
					if (Version > maxSupportedVersion)
					{
						throw new Exception("Unsupported BVE5 " + headerType + " version: " + s);
					}
					break;
				}
				l--;
			}
			if (splitHeader.Length >= 2)
			{
				/*
				 * Pull out the text encoding of our file
				 */
				Encoding = TextEncoding.ParseEncoding(splitHeader[1]);
			}
			else
			{
				Encoding = Encoding.UTF8;
			}
		}
	}
}
