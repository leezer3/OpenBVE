<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3c.org/TR/1999/REC-html401-19991224/loose.dtd">
<!-- saved from url=(0063)http://trainsimframework.org/develop/plugin_iruntime.html -->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><HTML 
xml:lang="en" xmlns="http://www.w3.org/1999/xhtml"><HEAD>
<META content="text/html; charset=utf-8" http-equiv="Content-Type"><LINK rel="SHORTCUT ICON" 
href="../Images/favicon.png">
<META name="keywords" content="openBVE,homepage"><TITLE>Train plugin API 
(IRuntime)</TITLE>
<META name="GENERATOR" content="MSHTML 9.00.8112.16443"></HEAD>
<BODY style="font-family: sans-serif; font-size: small;"><FONT color="#0080ff" 
size="+2">Train plugin API (IRuntime)</FONT><BR>
<TABLE style="border: 0px currentColor; margin-right: 10pt; margin-left: 10pt;">
  <TBODY>
  <TR>
    <TD><FONT color="#808080" size="-1"></FONT></TD></TR></TBODY></TABLE><BR>This is 
the documentation for train plugins. In order to create a train plugin, 
implement the IRuntime interface from the OpenBveApi.Runtime namespace. In the 
following, you will find a description of how this interface works.<BR><BR>
<TABLE>
  <TBODY>
  <TR style="height: 4px;">
    <TD></TD></TR></TBODY></TABLE><FONT color="#0080ff" size="+1">■ Contents</FONT>
<HR>

<TABLE style="border: 0px currentColor; margin-right: 10pt; margin-left: 10pt;">
  <TBODY>
  <TR>
    <TD><FONT color="#808080" size="-1"></FONT></TD></TR></TBODY></TABLE>↷ <A href="http://trainsimframework.org/develop/plugin_iruntime.html#overview">1. 
Overview</A><BR>↷ <A href="http://trainsimframework.org/develop/plugin_iruntime.html#functions">2. 
Function calls</A><BR>↷ <A href="http://trainsimframework.org/develop/plugin_iruntime.html#sound">3. 
Playing sounds</A><BR>↷ <A href="http://trainsimframework.org/develop/plugin_iruntime.html#ai">4. 
Supporting the AI</A><BR><BR><A name="overview"><BR>
<TABLE>
  <TBODY>
  <TR style="height: 4px;">
    <TD></TD></TR></TBODY></TABLE><FONT color="#0080ff" size="+1">■ Overview</FONT>
<HR>

<TABLE style="border: 0px currentColor; margin-right: 10pt; margin-left: 10pt;">
  <TBODY>
  <TR>
    <TD><FONT color="#808080" size="-1"></FONT></TD></TR></TBODY></TABLE><BR>The 
following functions are called in this order when the plugin is loaded:<BR><BR>
<TABLE cellSpacing="0">
  <TBODY>
  <TR>
    <TD vAlign="top">●</TD>
    <TD>&nbsp;</TD>
    <TD>Load</TD></TR></TBODY></TABLE>
<TABLE cellSpacing="0">
  <TBODY>
  <TR>
    <TD vAlign="top">●</TD>
    <TD>&nbsp;</TD>
    <TD>SetVehicleSpecs</TD></TR></TBODY></TABLE>
<TABLE cellSpacing="0">
  <TBODY>
  <TR>
    <TD vAlign="top">●</TD>
    <TD>&nbsp;</TD>
    <TD>Initialize</TD></TR></TBODY></TABLE>
<TABLE cellSpacing="0">
  <TBODY>
  <TR>
    <TD vAlign="top">●</TD>
    <TD>&nbsp;</TD>
    <TD>SetPower</TD></TR></TBODY></TABLE>
<TABLE cellSpacing="0">
  <TBODY>
  <TR>
    <TD vAlign="top">●</TD>
    <TD>&nbsp;</TD>
    <TD>SetBrake</TD></TR></TBODY></TABLE>
<TABLE cellSpacing="0">
  <TBODY>
  <TR>
    <TD vAlign="top">●</TD>
    <TD>&nbsp;</TD>
    <TD>SetReverser</TD></TR></TBODY></TABLE>
<TABLE cellSpacing="0">
  <TBODY>
  <TR>
    <TD vAlign="top">●</TD>
    <TD>&nbsp;</TD>
    <TD>SetSignal</TD></TR></TBODY></TABLE><BR>The following functions can be called 
at any time:<BR><BR>
<TABLE cellSpacing="0">
  <TBODY>
  <TR>
    <TD vAlign="top">●</TD>
    <TD>&nbsp;</TD>
    <TD>SetPower</TD></TR></TBODY></TABLE>
<TABLE cellSpacing="0">
  <TBODY>
  <TR>
    <TD vAlign="top">●</TD>
    <TD>&nbsp;</TD>
    <TD>SetBrake</TD></TR></TBODY></TABLE>
<TABLE cellSpacing="0">
  <TBODY>
  <TR>
    <TD vAlign="top">●</TD>
    <TD>&nbsp;</TD>
    <TD>SetReverser</TD></TR></TBODY></TABLE>
<TABLE cellSpacing="0">
  <TBODY>
  <TR>
    <TD vAlign="top">●</TD>
    <TD>&nbsp;</TD>
    <TD>KeyDown</TD></TR></TBODY></TABLE>
<TABLE cellSpacing="0">
  <TBODY>
  <TR>
    <TD vAlign="top">●</TD>
    <TD>&nbsp;</TD>
    <TD>KeyUp</TD></TR></TBODY></TABLE>
<TABLE cellSpacing="0">
  <TBODY>
  <TR>
    <TD vAlign="top">●</TD>
    <TD>&nbsp;</TD>
    <TD>HornBlow</TD></TR></TBODY></TABLE>
<TABLE cellSpacing="0">
  <TBODY>
  <TR>
    <TD vAlign="top">●</TD>
    <TD>&nbsp;</TD>
    <TD>DoorChange</TD></TR></TBODY></TABLE>
<TABLE cellSpacing="0">
  <TBODY>
  <TR>
    <TD vAlign="top">●</TD>
    <TD>&nbsp;</TD>
    <TD>SetSignal</TD></TR></TBODY></TABLE>
<TABLE cellSpacing="0">
  <TBODY>
  <TR>
    <TD vAlign="top">●</TD>
    <TD>&nbsp;</TD>
    <TD>SetBeacon</TD></TR></TBODY></TABLE>
<TABLE cellSpacing="0">
  <TBODY>
  <TR>
    <TD vAlign="top">●</TD>
    <TD>&nbsp;</TD>
    <TD>PerformAI</TD></TR></TBODY></TABLE><BR>The following function is called when 
the plugin is unloaded:<BR><BR>
<TABLE cellSpacing="0">
  <TBODY>
  <TR>
    <TD vAlign="top">●</TD>
    <TD>&nbsp;</TD>
    <TD>Unload</TD></TR></TBODY></TABLE><BR><A name="functions"><BR>
<TABLE>
  <TBODY>
  <TR style="height: 4px;">
    <TD></TD></TR></TBODY></TABLE><FONT color="#0080ff">● Function calls</FONT>
<TABLE style="border: 0px currentColor; margin-right: 10pt; margin-left: 10pt;">
  <TBODY>
  <TR>
    <TD><FONT color="#808080" size="-1"></FONT></TD></TR></TBODY></TABLE>
<TABLE>
  <TBODY>
  <TR style="height: 2px;">
    <TD></TD></TR></TBODY></TABLE><BR>The following is a list of all function calls 
along with explanations on their behavior.<BR><BR>
<HR>
<BR><BR><B>bool Load(LoadProperties properties)</B><BR><BR>This function is the 
first to be called after the plugin has been loaded. When this function triggers 
inside the plugin, a matching call to <EM>Unload</EM> will be made when the 
plugin is unloaded.<BR><BR>Arguments:
<TABLE style="border-collapse: collapse;">
  <TBODY>
  <TR>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">LoadProperties</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">properties</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">The properties supplied to the plugin on loading.</TD></TR>
  </TBODY></TABLE><BR>LoadProperties (class):
<TABLE style="border-collapse: collapse;">
  <TBODY>
  <TR>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">string</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">PluginFolder</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">Gets the absolute path to the plugin folder.</TD></TR>
  <TR>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">string</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">TrainFolder</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">Gets the absolute path to the train folder.</TD></TR>
  <TR>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">int[]</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">Panel</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">Gets or sets the array of panel variables.</TD></TR>
  <TR>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">PlaySoundDelegate</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">PlaySound</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">Gets the callback function for playing sounds.</TD></TR>
  <TR>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">AISupport</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">AISupport</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">The extent to which the plugin supports the AI.</TD></TR>
  <TR>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">string</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">FailureReason</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">Gets or sets the reason why the plugin failed 
  loading.</TD></TR></TBODY></TABLE><BR>PlaySound (function):<BR>See the section 
on <A 
href="http://trainsimframework.org/develop/plugin_iruntime.html#sound">playing 
sounds</A>.<BR><BR>AISupport (enumeration):
<TABLE style="border-collapse: collapse;">
  <TBODY>
  <TR>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">AISupport.None</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
    bgColor="#ffffff">0</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">The plugin does not support the AI. Calls to PerformAI 
      will not be made. Non-player trains will not use the plugin.</TD></TR>
  <TR>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">AISupport.Basic</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
    bgColor="#ffffff">1</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">The plugin complements the built-in AI by performing 
      only functions specific to the plugin.</TD></TR></TBODY></TABLE><BR>Return 
value:
<TABLE style="border-collapse: collapse;">
  <TBODY>
  <TR>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">bool</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">Whether the plugin was loaded successfully.</TD></TR>
</TBODY></TABLE><BR>If your plugin uses external configuration files, open files 
relative to the <EM>properties.PluginFolder</EM> or 
<EM>properties.TrainFolder</EM>. The difference between the two can be best 
visualized when the plugin is in a shared folder: Files relative to the plugin 
folder are common for all trains that use the plugin, while files relative to 
the train folder are specific to each train. The plugin folder is simply the 
folder in which the plugin is stored.<BR><BR>Initialize the 
<EM>properties.Panel</EM> array to any size and with any startup values you 
need. The array is processed after every call to <EM>Elapse</EM> by the host 
application in order to update custom panel indicators. Developers of the 
panel2.cfg file can query these values with the <EM>ats</EM>i variable, while 
developers of the panel.animated file can query these values with the 
<EM>pluginState[</EM>i<EM>]</EM> variable.<BR><BR>The 
<EM>properties.PlaySound</EM> function can be used at any time to play sounds. 
This callback function returns a handle that you can use to track if the sound 
is still playing, to change its volume and pitch, or to stop it. Please also see 
the section on <A href="http://trainsimframework.org/develop/plugin_iruntime.html#sound">playing 
sounds</A>.<BR><BR>Set <EM>properties.AISupport</EM> to a value other than 
<EM>AISupport.None</EM> if you want your plugin to support the AI. Please also 
see the section on <A href="http://trainsimframework.org/develop/plugin_iruntime.html#ai">supporting 
the AI</A>.<BR><BR>You should return <B>true</B> as the return value when 
loading succeeded. If, on the other hand, you want to abort loading the plugin, 
for example because an external configuration file could not be found, return 
<B>false</B> and set <EM>properties.FailureReason</EM> to a human-readible 
string that explains why loading failed.<BR><BR>
<HR>
<BR><BR><B>void Unload()</B><BR><BR>This function is the last to be called 
before the plugin is unloaded.<BR><BR>
<HR>
<BR><BR><B>void SetVehicleSpecs(VehicleSpecs specs)</B><BR><BR>This function is 
called after <EM>Load</EM> to inform the plugin about the specifications of the 
train.<BR><BR>Arguments:
<TABLE style="border-collapse: collapse;">
  <TBODY>
  <TR>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">VehicleSpecs</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">specs</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">The specifications of the train.</TD></TR></TBODY></TABLE><BR>
VehicleSpecs (class):
<TABLE style="border-collapse: collapse;">
  <TBODY>
  <TR>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">int</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">PowerNotches</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">Gets the number of power notches the train has.</TD></TR>
  <TR>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">BrakeTypes</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">BrakeType</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">Gets the type of brake the train uses.</TD></TR>
  <TR>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">int</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">BrakeNotches</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">Gets the number of brake notches the train has, 
      including the hold brake, but excluding the emergency brake.</TD></TR>
  <TR>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">bool</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">HasHoldBrake</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">Gets whether the train has a hold brake.</TD></TR>
  <TR>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">int</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">AtsNotch</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">Gets the index of the brake notch that corresponds to B1 
      or LAP.</TD></TR>
  <TR>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">int</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">B67Notch</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">Gets the index of the brake notch that corresponds to 
      70% of the available brake notches.</TD></TR>
  <TR>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">int</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">Cars</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">Gets the number of cars the train has.</TD></TR>
</TBODY></TABLE><BR>BrakeTypes (enumeration):
<TABLE style="border-collapse: collapse;">
  <TBODY>
  <TR>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">BrakeTypes.ElectromagneticStraightAirBrake</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
    bgColor="#ffffff">0</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">The train uses the electromagnetic straight air 
  brake.</TD></TR>
  <TR>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">BrakeTypes.ElectricCommandBrake</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
    bgColor="#ffffff">1</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">The train uses the analog/digital electro-pneumatic air 
      brake without a brake pipe (electric command brake).</TD></TR>
  <TR>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">BrakeTypes.AutomaticAirBrake</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
    bgColor="#ffffff">2</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">The train uses the automatic air brake with partial 
      release.</TD></TR></TBODY></TABLE><BR>For more information about the meanings of 
the notches, see the sections on SetReverser, SetPower and SetBrake.<BR><BR>
<HR>
<BR><BR><B>void Initialize(InitializationModes mode)</B><BR><BR>This function is 
called after <EM>SetVehicleSpecs</EM> and informs the plugin about the mode the 
safety system should start in. If the safety system in your plugin can be 
activated or deactivated, you should initialize the state of the plugin 
accordingly. When the user selects a <EM>Jump to station</EM> target, this 
function is also called prior to moving the train to its new 
location.<BR><BR>Arguments:
<TABLE style="border-collapse: collapse;">
  <TBODY>
  <TR>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">InitializationModes</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">mode</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">The mode of initialization.</TD></TR></TBODY></TABLE><BR>
InitializationModes (enumeration):
<TABLE style="border-collapse: collapse;">
  <TBODY>
  <TR>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">InitializationModes.OnService</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">-1</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">The safety system should be enabled. The train has its 
      service brakes applied.</TD></TR>
  <TR>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">InitializationModes.OnEmergency</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
    bgColor="#ffffff">0</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">The safety system should be enabled. The train has its 
      emergency brakes applied.</TD></TR>
  <TR>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">InitializationModes.OffEmergency</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
    bgColor="#ffffff">1</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">The safety system should be disabled. The train has its 
      emergency brakes applied.</TD></TR></TBODY></TABLE><BR>The initialization mode 
is set in CSV/RW routes via the Route.Change command. Please note that any value 
between -2147483648 and 2147483647 can be conveyed to the plugin - the 
enumeration members are simply meant to standardize the meanings of the 
initialization modes.<BR><BR>
<HR>
<BR><BR><B>void Elapse(ElapseData data)</B><BR><BR>This function is called every 
frame. It informs the plugin about the current state of the train and allows to 
set the virtual handles.<BR><BR>Arguments:
<TABLE style="border-collapse: collapse;">
  <TBODY>
  <TR>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">ElapseData</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">data</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">The data passed to the plugin.</TD></TR></TBODY></TABLE><BR>
ElapseData (class):
<TABLE style="border-collapse: collapse;">
  <TBODY>
  <TR>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">VehicleState</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">Vehicle</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">Gets the state of the train.</TD></TR>
  <TR>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">PrecedingVehicleState</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">PrecedingVehicle</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">Gets the state of the preceding train, or a null 
      reference if there is no preceding train.</TD></TR>
  <TR>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">Handles</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">Handles</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">Gets or sets the virtual handles.</TD></TR>
  <TR>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">Time</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">TotalTime</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">Gets the absolute in-game time.</TD></TR>
  <TR>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">Time</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">ElapsedTime</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">Gets the time that elapsed since the last call to 
    Elapse.</TD></TR>
  <TR>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">string</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">DebugMessage</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">Gets or sets the debug message the plugin wants the host 
      application to display.</TD></TR></TBODY></TABLE><BR>VehicleState (class):
<TABLE style="border-collapse: collapse;">
  <TBODY>
  <TR>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">double</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">Location</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">Gets the location of the front of the train, in 
    meters.</TD></TR>
  <TR>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">Speed</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">Speed</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">Gets the speed of the train.</TD></TR>
  <TR>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">double</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">BcPressure</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">Gets the pressure in the brake cylinder, in 
  pascal.</TD></TR>
  <TR>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">double</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">MrPressure</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">Gets the pressure in the main reservoir, in 
  pascal.</TD></TR>
  <TR>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">double</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">ErPressure</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">Gets the pressure in the equilizing reservoir, in 
    pascal.</TD></TR>
  <TR>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">double</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">BpPressure</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">Gets the pressure in the brake pipe, in pascal.</TD></TR>
  <TR>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">double</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">SapPressure</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">Gets the pressure in the straight air pipe, in 
  pascal.</TD></TR></TBODY></TABLE><BR>PrecedingVehicleState (class):
<TABLE style="border-collapse: collapse;">
  <TBODY>
  <TR>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">double</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">Location</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">Gets the location of the back of the preceding train, in 
      meters.</TD></TR>
  <TR>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">double</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">Distance</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">Gets the distance from the front of the current train to 
      the back of the preceding train, in meters.</TD></TR>
  <TR>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">Speed</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">Speed</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">Gets the speed of the preceding train.</TD></TR>
</TBODY></TABLE><BR>Speed (structure):
<TABLE style="border-collapse: collapse;">
  <TBODY>
  <TR>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">double</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">MetersPerSecond</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">Gets the speed in meters per second.</TD></TR>
  <TR>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">double</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">KilometersPerHour</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">Gets the speed in kilometers per hour.</TD></TR>
  <TR>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">double</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">MilesPerHour</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">Gets the speed in miles per hour.</TD></TR>
</TBODY></TABLE><BR>Time (structure):
<TABLE style="border-collapse: collapse;">
  <TBODY>
  <TR>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">double</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">Seconds</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">Gets the time in seconds.</TD></TR>
  <TR>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">double</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">Milliseconds</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">Gets the time in milliseconds.</TD></TR></TBODY></TABLE><BR>
Handles (class):
<TABLE style="border-collapse: collapse;">
  <TBODY>
  <TR>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">int</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">Reverser</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">Gets or sets the reverser position.</TD></TR>
  <TR>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">int</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">PowerNotch</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">Gets or sets the power notch.</TD></TR>
  <TR>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">int</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">BrakeNotch</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">Gets or sets the brake notch.</TD></TR>
  <TR>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">bool</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">ConstSpeed</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">Gets or sets whether the const speed system is 
    enabled.</TD></TR></TBODY></TABLE><BR>The meanings of the notches are explained 
in the sections on SetReverser, SetPower and SetBrake.<BR><BR>
<HR>
<BR><BR><B>void SetReverser(int reverser)</B><BR><BR>This function is called 
when the driver changes the reverser position.<BR><BR>Arguments:
<TABLE style="border-collapse: collapse;">
  <TBODY>
  <TR>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">int</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">reverser</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">The new reverser position.</TD></TR></TBODY></TABLE><BR>For 
<EM>reverser</EM>, the value of -1 corresponds to backward, 0 to neutral and 1 
to forward.<BR><BR>
<HR>
<BR><BR><B>void SetPower(int powerNotch)</B><BR><BR>This function is called when 
the driver changes the power notch.<BR><BR>Arguments:
<TABLE style="border-collapse: collapse;">
  <TBODY>
  <TR>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">int</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">powerNotch</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">The new power notch.</TD></TR></TBODY></TABLE><BR>For 
<EM>powerNotch</EM>, the value passed can range from 0 to 
<EM>specs.PowerNotches</EM>.<BR><BR>
<HR>
<BR><BR><B>void SetBrake(int brakeNotch)</B><BR><BR>This function is called when 
the driver changes the brake notch.<BR><BR>Arguments:
<TABLE style="border-collapse: collapse;">
  <TBODY>
  <TR>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">int</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">brakeNotch</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">The new brake notch.</TD></TR></TBODY></TABLE><BR>For trains 
with the <B>automatic air brake</B>, 0 is RELEASE, 1 is LAP, 2 is SERVICE and 3 
is EMERGENCY.<BR><BR>For all other trains <B>without a hold brake</B>, 0 is 
released brakes, 1 is brake notch B1, 2 is brake notch B2, etc., 
<EM>specs.BrakeNotches</EM> is the maximum brake notch, and 
<EM>specs.BrakeNotches</EM>+1 is the emergency brake.<BR><BR>For all other 
trains <B>with a hold brake</B>, 0 is released brakes, 1 is the hold brake, 2 is 
brake notch B1, 3 is brake notch B2, etc., <EM>specs.BrakeNotches</EM> is the 
maximum brake notch, and <EM>specs.BrakeNotches</EM>+1 is the emergency 
brake.<BR><BR>Generally speaking, for trains without the automatic air brake, 
<EM>specs.AtsNotch</EM> is brake notch B1 and <EM>specs.BrakeNotches</EM> is the 
maximum service brake notch. For all types of trains, 
<EM>specs.BrakeNotches</EM>+1 is the emergency brake.<BR><BR>
<HR>
<BR><BR><B>void KeyDown(VirtualKeys key)</B><BR><BR>This function is called when 
a plugin-specific key is pressed.<BR><BR>Arguments:
<TABLE style="border-collapse: collapse;">
  <TBODY>
  <TR>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">VirtualKeys</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">key</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">The virtual key that was pressed.</TD></TR>
</TBODY></TABLE><BR>VirtualKeys (enumeration):
<TABLE style="border-collapse: collapse;">
  <TBODY>
  <TR>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">VirtualKeys.S</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
    bgColor="#ffffff">0</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">The virtual S key. The default assignment is 
  Space.</TD></TR>
  <TR>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">VirtualKeys.A1</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
    bgColor="#ffffff">1</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">The virtual A1 key. The default assignment is 
  Insert.</TD></TR>
  <TR>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">VirtualKeys.A2</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
    bgColor="#ffffff">2</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">The virtual A2 key. The default assignment is 
  Delete.</TD></TR>
  <TR>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">VirtualKeys.B1</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
    bgColor="#ffffff">3</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">The virtual B1 key. The default assignment is 
  Home.</TD></TR>
  <TR>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">VirtualKeys.B2</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
    bgColor="#ffffff">4</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">The virtual B2 key. The default assignment is End.</TD></TR>
  <TR>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">VirtualKeys.C1</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
    bgColor="#ffffff">5</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">The virtual C1 key. The default assignment is Page 
  Up.</TD></TR>
  <TR>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">VirtualKeys.C2</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
    bgColor="#ffffff">6</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">The virtual C2 key. The default assignment is Page 
    Down.</TD></TR>
  <TR>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">VirtualKeys.D</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
    bgColor="#ffffff">7</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">The virtual D key. The default assignment is 2.</TD></TR>
  <TR>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">VirtualKeys.E</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
    bgColor="#ffffff">8</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">The virtual E key. The default assignment is 3.</TD></TR>
  <TR>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">VirtualKeys.F</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
    bgColor="#ffffff">9</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">The virtual F key. The default assignment is 4.</TD></TR>
  <TR>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">VirtualKeys.G</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">10</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">The virtual G key. The default assignment is 5.</TD></TR>
  <TR>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">VirtualKeys.H</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">11</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">The virtual H key. The default assignment is 6.</TD></TR>
  <TR>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">VirtualKeys.I</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">12</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">The virtual I key. The default assignment is 7.</TD></TR>
  <TR>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">VirtualKeys.J</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">13</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">The virtual J key. The default assignment is 8.</TD></TR>
  <TR>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">VirtualKeys.K</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">14</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">The virtual K key. The default assignment is 9.</TD></TR>
  <TR>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">VirtualKeys.L</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">15</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">The virtual L key. The default assignment is 0.</TD></TR>
  </TBODY></TABLE><BR>When making use of plugin-specific keys in your plugin, be 
sure to release a documentation that includes the virtual names of the keys 
along with their plugin-specific meanings.<BR><BR>
<HR>
<BR><BR><B>void KeyUp(VirtualKeys key)</B><BR><BR>This function is called when a 
plugin-specific key is released.<BR><BR>Arguments:
<TABLE style="border-collapse: collapse;">
  <TBODY>
  <TR>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">VirtualKeys</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">key</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">The virtual key that was released.</TD></TR>
</TBODY></TABLE><BR>VirtualKeys (enumeration):
<TABLE style="border-collapse: collapse;">
  <TBODY>
  <TR>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">VirtualKeys.S</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
    bgColor="#ffffff">0</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">The virtual S key. The default assignment is 
  Space.</TD></TR>
  <TR>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">VirtualKeys.A1</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
    bgColor="#ffffff">1</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">The virtual A1 key. The default assignment is 
  Insert.</TD></TR>
  <TR>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">VirtualKeys.A2</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
    bgColor="#ffffff">2</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">The virtual A2 key. The default assignment is 
  Delete.</TD></TR>
  <TR>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">VirtualKeys.B1</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
    bgColor="#ffffff">3</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">The virtual B1 key. The default assignment is 
  Home.</TD></TR>
  <TR>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">VirtualKeys.B2</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
    bgColor="#ffffff">4</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">The virtual B2 key. The default assignment is End.</TD></TR>
  <TR>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">VirtualKeys.C1</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
    bgColor="#ffffff">5</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">The virtual C1 key. The default assignment is Page 
  Up.</TD></TR>
  <TR>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">VirtualKeys.C2</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
    bgColor="#ffffff">6</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">The virtual C2 key. The default assignment is Page 
    Down.</TD></TR>
  <TR>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">VirtualKeys.D</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
    bgColor="#ffffff">7</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">The virtual D key. The default assignment is 2.</TD></TR>
  <TR>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">VirtualKeys.E</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
    bgColor="#ffffff">8</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">The virtual E key. The default assignment is 3.</TD></TR>
  <TR>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">VirtualKeys.F</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
    bgColor="#ffffff">9</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">The virtual F key. The default assignment is 4.</TD></TR>
  <TR>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">VirtualKeys.G</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">10</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">The virtual G key. The default assignment is 5.</TD></TR>
  <TR>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">VirtualKeys.H</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">11</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">The virtual H key. The default assignment is 6.</TD></TR>
  <TR>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">VirtualKeys.I</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">12</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">The virtual I key. The default assignment is 7.</TD></TR>
  <TR>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">VirtualKeys.J</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">13</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">The virtual J key. The default assignment is 8.</TD></TR>
  <TR>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">VirtualKeys.K</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">14</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">The virtual K key. The default assignment is 9.</TD></TR>
  <TR>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">VirtualKeys.L</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">15</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">The virtual L key. The default assignment is 0.</TD></TR>
  </TBODY></TABLE><BR>When making use of plugin-specific keys in your plugin, be 
sure to release a documentation that includes the virtual names of the keys 
along with their plugin-specific meanings.<BR><BR>
<HR>
<BR><BR><B>void HornBlow(HornTypes type)</B><BR><BR>This function is called when 
a horn starts playing. In case of the musical horn, this function is also called 
when the horn stops playing.<BR><BR>Arguments:
<TABLE style="border-collapse: collapse;">
  <TBODY>
  <TR>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">HornTypes</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">type</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">The type of horn.</TD></TR></TBODY></TABLE><BR>HornTypes 
(enumeration):
<TABLE style="border-collapse: collapse;">
  <TBODY>
  <TR>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">HornTypes.Primary</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
    bgColor="#ffffff">0</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">The primary horn.</TD></TR>
  <TR>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">HornTypes.Secondary</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
    bgColor="#ffffff">1</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">The secondary horn.</TD></TR>
  <TR>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">HornTypes.Music</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
    bgColor="#ffffff">2</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">The musical horn.</TD></TR></TBODY></TABLE><BR>
<HR>
<BR><BR><B>void DoorChange(DoorStates oldState, DoorStates 
newState)</B><BR><BR>This function is called when the state of the doors 
change.<BR><BR>Arguments:
<TABLE style="border-collapse: collapse;">
  <TBODY>
  <TR>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">DoorStates</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">oldState</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">The old state of the doors.</TD></TR>
  <TR>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">DoorStates</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">newState</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">The new state of the doors.</TD></TR></TBODY></TABLE><BR>
DoorStates (enumeration):
<TABLE style="border-collapse: collapse;">
  <TBODY>
  <TR>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">DoorStates.None</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
    bgColor="#ffffff">0</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">No door is open.</TD></TR>
  <TR>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">DoorStates.Left</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
    bgColor="#ffffff">1</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">The left doors are open.</TD></TR>
  <TR>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">DoorStates.Right</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
    bgColor="#ffffff">2</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">The right doors are open.</TD></TR>
  <TR>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">DoorStates.Both</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
    bgColor="#ffffff">3</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">All doors are open.</TD></TR></TBODY></TABLE><BR>
<HR>
<BR><BR><B>void SetSignal(SignalData[] data)</B><BR><BR>This function is called 
when the aspect in the current or in any of the upcoming section changes, or 
when passing section boundaries. For the current section, it is assumed that no 
train is currently inside. Only sections until the first red section are 
reported.<BR><BR>Arguments:
<TABLE style="border-collapse: collapse;">
  <TBODY>
  <TR>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">SignalData[]</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">data</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">The signal data per section.</TD></TR></TBODY></TABLE><BR>
SignalData (class):
<TABLE style="border-collapse: collapse;">
  <TBODY>
  <TR>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">int</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">Aspect</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">Gets the aspect of the section.</TD></TR>
  <TR>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">double</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">Distance</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">Gets the distance to the section.</TD></TR>
</TBODY></TABLE><BR>The <EM>data</EM> array contains one entry per section, 
where <EM>data[0]</EM> is the current section, <EM>data[1]</EM> the upcoming 
section, and so on. You can inspect the aspect and the distance to each section 
reported.<BR><BR>Please note that the length of the <EM>data</EM> array is 
dynamic. Only sections until the first red section are reported. This means that 
you need to check the size of the array before querying a particular 
section.<BR><BR>Please also note that the last section in the <EM>data</EM> 
array does not have to be red necessarily. For example at the end of the track, 
the last section might be green.<BR><BR>In CSV/RW routes, the Track.Section 
(CSV) or @Section (RW) command is used to create signalling sections. The 
<EM>data.Aspect</EM> member corresponds to any of the aspects defined by this 
command.<BR><BR>
<HR>
<BR><BR><B>void SetBeacon(BeaconData data)</B><BR><BR>This function is called 
when a beacon is passed by the front of the train.<BR><BR>Arguments:
<TABLE style="border-collapse: collapse;">
  <TBODY>
  <TR>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">BeaconData</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">data</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">The beacon data.</TD></TR></TBODY></TABLE><BR>BeaconData 
(class):
<TABLE style="border-collapse: collapse;">
  <TBODY>
  <TR>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">int</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">Type</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">Gets the type of beacon.</TD></TR>
  <TR>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">int</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">Optional</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">Gets optional data the beacon transmits.</TD></TR>
  <TR>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">SignalData</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">Signal</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">Gets the section the beacon is attached to.</TD></TR>
</TBODY></TABLE><BR>SignalData (class):
<TABLE style="border-collapse: collapse;">
  <TBODY>
  <TR>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">int</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">Aspect</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">Gets the aspect of the section.</TD></TR>
  <TR>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">double</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">Distance</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">Gets the distance to the section.</TD></TR>
</TBODY></TABLE><BR>In CSV/RW routes, the Track.Beacon (CSV) or @Beacon (RW) 
command is used to install beacons on the route. Both the beacon type and the 
optional data set by this command is transmitted to the train plugin along with 
the distance to the attached section.<BR><BR>Please note that plugins may 
receive beacon types less than 0. These beacon types are reserved for future use 
and must be ignored by current plugins.<BR><BR>
<HR>
<BR><BR><B>void PerformAI(AIData data)</B><BR><BR>This function is called when 
the AI is performed.<BR><BR>Arguments:
<TABLE style="border-collapse: collapse;">
  <TBODY>
  <TR>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">AIData</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">data</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">The AI data.</TD></TR></TBODY></TABLE><BR>AIData (class):
<TABLE style="border-collapse: collapse;">
  <TBODY>
  <TR>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">Handles</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">Handles</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">Gets or sets the driver handles.</TD></TR>
  <TR>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">AIResponse</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">Response</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">Gets or sets the AI response.</TD></TR></TBODY></TABLE><BR>
Whenever you let the AI perform something, set <EM>data.Response</EM> to a value 
other than <EM>AIResponse.None</EM>. Please also see the section on <A href="http://trainsimframework.org/develop/plugin_iruntime.html#ai">supporting 
the AI</A>.<BR><BR><A name="sound"><BR>
<TABLE>
  <TBODY>
  <TR style="height: 4px;">
    <TD></TD></TR></TBODY></TABLE><FONT color="#0080ff" size="+1">■ Playing 
sounds</FONT>
<HR>

<TABLE style="border: 0px currentColor; margin-right: 10pt; margin-left: 10pt;">
  <TBODY>
  <TR>
    <TD><FONT color="#808080" size="-1"></FONT></TD></TR></TBODY></TABLE><BR>You can 
play custom sounds from within your plugin. Custom sounds need to be configured 
inside the <EM>sound.cfg</EM> file before they can be used by the plugin. In 
order to play such sounds, keep a reference to the <EM>PlaySound</EM> function 
that is passed in the Load call. You can then start playing sounds at any time 
by calling this function:<BR><BR><B>SoundHandle PlaySound(int index, double 
volume, double pitch, bool looped)</B><BR><BR>Arguments:
<TABLE style="border-collapse: collapse;">
  <TBODY>
  <TR>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">int</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">index</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">The index to the sound to be played.</TD></TR>
  <TR>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">double</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">volume</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">The initial volume of the sound. A value of 1.0 
      represents nominal volume.</TD></TR>
  <TR>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">double</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">pitch</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">The initial pitch of the sound. A value of 1.0 
      represents nominal pitch.</TD></TR>
  <TR>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">bool</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">looped</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">Whether the sound should be played in an indefinate 
    loop.</TD></TR></TBODY></TABLE><BR>Return value:
<TABLE style="border-collapse: collapse;">
  <TBODY>
  <TR>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">SoundHandle</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">The handle to the sound, or a null reference if the 
      sound could not be played.</TD></TR></TBODY></TABLE><BR>When you call the 
PlaySound function, a handle will be returned that you can use to later check if 
the sound is still playing, in order to change the volume or pitch, or to stop 
playing the sound. If you play a sound in a loop, you <B>must</B> keep the 
handle in order to subsequently stop the sound - otherwise it would play 
indefinately. The handle returned by PlaySound is of the following 
form:<BR><BR>SoundHandle (class):
<TABLE style="border-collapse: collapse;">
  <TBODY>
  <TR>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">bool</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">Playing</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">Gets whether the sound is still playing. Once this 
      returns false, the sound handle is invalid.</TD></TR>
  <TR>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">bool</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">Stopped</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">Gets whether the sound has stopped. Once this returns 
      true, the sound handle is invalid.</TD></TR>
  <TR>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">double</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">Volume</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">Gets or sets the volume. A value of 1.0 represents 
      nominal volume.</TD></TR>
  <TR>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">double</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">Pitch</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">Gets or sets the pitch. A value of 1.0 represents 
      nominal pitch.</TD></TR>
  <TR>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">void</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">Stop()</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">Stops the sound and invalidates the handle.</TD></TR>
</TBODY></TABLE><BR>Please note that depending on the implementation by the host 
application, sounds that are not in audible range may not be played at 
all.<BR><BR>Please also note that the handle returned might be a null reference 
in the case the host application could not play the sound, for example because 
the file could not be found.<BR><BR><A name="ai"><BR>
<TABLE>
  <TBODY>
  <TR style="height: 4px;">
    <TD></TD></TR></TBODY></TABLE><FONT color="#0080ff" size="+1">■ Supporting the 
AI</FONT>
<HR>

<TABLE style="border: 0px currentColor; margin-right: 10pt; margin-left: 10pt;">
  <TBODY>
  <TR>
    <TD><FONT color="#808080" size="-1"></FONT></TD></TR></TBODY></TABLE>
<BR>Usually, the host application performs the AI. However, your plugin might 
require special operation precedures which the built-in AI cannot know of. For 
this reason, you can complement the built-in AI by performing operation 
procedures specific to your plugin. Before considering to support the AI, 
however, you should understand what the AI is intended to represent: a human 
being standing or sitting in the cab, operating levers and pressing buttons, 
just like the player. This means that the AI must not operate 6 levers and 12 
buttons simultaneously, but only do one thing at a time.<BR><BR>If you want to 
support the AI, first set <EM>data.AISupport</EM> inside the Load call to 
<EM>AISupport.Basic</EM>. Whenever the host application performs an AI round, a 
call to PerformAI will then be made inside the plugin. The plugin can then 
decide to let the AI perform an action, or to pass and let the host application 
perform an action. Different kinds of actions can take different amounts of 
time, so whenever the plugin lets the AI perform an action, it will also set the 
time it takes before the next action can be performed.<BR><BR>It is important to 
understand that unless your plugin also simulates a full ATO with automatic 
stopping at stations, you must let the host application perform the AI for most 
of the time and only intervene if absolutely necessary, for example in order to 
start the engine, to acknowledge a vigilance device, etc. Whenever this is the 
case, react to the PerformAI call appropriately:<BR><BR><B>void PerformAI(AIData 
data)</B><BR><BR>Arguments:
<TABLE style="border-collapse: collapse;">
  <TBODY>
  <TR>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">AIData</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">data</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">The AI data.</TD></TR></TBODY></TABLE><BR>AIData (class):
<TABLE style="border-collapse: collapse;">
  <TBODY>
  <TR>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">Handles</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">Handles</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">Gets or sets the driver handles.</TD></TR>
  <TR>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">AIResponse</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">Response</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">Gets or sets the AI response.</TD></TR></TBODY></TABLE><BR>
Handles (class):
<TABLE style="border-collapse: collapse;">
  <TBODY>
  <TR>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">int</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">Reverser</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">Gets or sets the reverser position.</TD></TR>
  <TR>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">int</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">PowerNotch</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">Gets or sets the power notch.</TD></TR>
  <TR>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">int</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">BrakeNotch</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">Gets or sets the brake notch.</TD></TR>
  <TR>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">bool</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">ConstSpeed</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">Gets or sets whether the const speed system is 
    enabled.</TD></TR></TBODY></TABLE><BR>The meanings of the notches are explained 
in the sections on SetReverser, SetPower and SetBrake.<BR><BR>AIResponse 
(enumeration):
<TABLE style="border-collapse: collapse;">
  <TBODY>
  <TR>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">AIResponse.None</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">No action was performed by the plugin.</TD></TR>
  <TR>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">AIResponse.Short</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">The action performed took a short time.</TD></TR>
  <TR>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">AIResponse.Medium</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">The action performed took an average amount of 
  time.</TD></TR>
  <TR>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">AIResponse.Long</TD>
    <TD style="padding: 4px; border: 2px ridge currentColor;" 
      bgColor="#ffffff">The action performed took a long time.</TD></TR>
</TBODY></TABLE><BR>You can directly control the driver handles with the 
<EM>data.Handles</EM> member, for example if you want to cut power or apply a 
certain brake notch. For plugin-specific actions, you should only simulate key 
presses, for example by calling KeyDown or KeyUp. This will prevent you from 
letting the AI cheat in any way. If you let the AI operate the handles, you 
should only change by one notch at a time with a short response time.<BR><BR>If 
you decide to let the AI do something, you must set the <EM>data.Response</EM> 
member to a meaningful value. For operating the handles, best use a short 
response time, while for other actions like turning a switch not directly 
accessible, use a long response time. Note that the actual timings are at the 
whim of the host application.<BR><BR>Example:<BR>
<TABLE>
  <TBODY>
  <TR>
    <TD vAlign="top" width="16">
    <TD><FONT size="-1"><EM></EM></FONT></TD></TR>
  <TR>
    <TD vAlign="top" width="16">▶</TD>
    <TD style="border: 1px dashed currentColor;" bgColor="#d4d8ff"><TT>if 
      (AtsAlarm) {<BR>&nbsp;&nbsp;&nbsp;&nbsp; /* The driver needs to cut power 
      and apply the brakes,<BR>&nbsp;&nbsp;&nbsp;&nbsp; * then press the virtual 
      S key.*/<BR>&nbsp;&nbsp;&nbsp;&nbsp; if (data.Handles.PowerNotch &gt; 0) 
      {<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /* We change only by 
      one notch at a time. */<BR>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; data.Handles.PowerNotch 
      -= 1;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; data.Response = 
      AIResponse.Short;<BR>&nbsp;&nbsp;&nbsp;&nbsp; } else if 
      (data.Handles.BrakeNotch &lt; 2) {<BR>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /* We change only by one 
      notch at a time. */<BR>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; data.Handles.BrakeNotch 
      += 1;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; data.Response = 
      AIResponse.Short;<BR>&nbsp;&nbsp;&nbsp;&nbsp; } else {<BR>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /* We simulate a key 
      press here. */<BR>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; KeyDown(VirtualKeys.S);<BR>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; data.Response = 
      AIResponse.Medium;<BR>&nbsp;&nbsp;&nbsp;&nbsp; }<BR>} else if (AtoActive) 
      {<BR>&nbsp;&nbsp;&nbsp;&nbsp; /* Our ATO does not require driver 
      interaction, so<BR>&nbsp;&nbsp;&nbsp;&nbsp; * let's prevent the built-in 
      AI from doing anything. */<BR>&nbsp;&nbsp;&nbsp;&nbsp; data.Response = 
      AIResponse.Long;<BR>} else {<BR>&nbsp;&nbsp;&nbsp;&nbsp; /* Let the host 
      application perform a default action<BR>&nbsp;&nbsp;&nbsp;&nbsp; * such as 
      braking for signals or stations. */<BR>
      &nbsp;&nbsp;&nbsp;&nbsp; data.Response = AIResponse.None;<BR>}</TT></TD></TR>
  </TBODY></TABLE></A></BODY></HTML>
